collection = "200206_32kbps_" .. ecc_per_block .. "bytes"

packet_cnt = 1
packet_size = 128
-- ecc_per_block = 28 -- must be even
--pdata_per_block = 100 -- p for primitive; pdata_per_block + ecc_per_block < 256
block_number = 1 -- always 1 in current setting
pdata_per_block = packet_size / block_number - ecc_per_block
-- packet_size = (pdata_per_block + ecc_per_block) * block_number  -- bytes, including primitive data + ecc code

plot_data = false
enable_scatter_plot = false

-- program will find reference in this collection
-- basically generated by
-- "190808_reference_collect_renew.lua"
-- "190809_handle_ref_renew.lua"
-- "190811_auto_gen_refs.lua"
refs_collection = "200206_reference_collect_NLCD32"

frequencys = {8000}
dutys = {6}
combines = {1}
bit_per_symbols = {4}

SNR_start_dB = 50.5
SNR_end_dB = 59.5
SNR_step_dB = 1

function db2value(db)
    return 10 ^ (-db/20.)
end

-- first find the reference id
refs_ids = {}
for i=1,#frequencys do
    refs_ids[i] = {}
    for j=1, #dutys do
        refs_id = cjson.decode(mongo_get_one_as_jsonstr(refs_collection
            , '{"frequency":{"$numberDouble":"'..frequencys[i]..'"},"duty":'..dutys[j]..'}'
            , '{"limit": 1}'
        )).o_refs_id
        refs_ids[i][j] = refs_id
    end
end
logln("all refs found successfully")

for i=1,packet_cnt do
    -- for all different settings, use the same data the emulate
    local primitive_data = generate_random_data(pdata_per_block * block_number)
    
    local SNR_dB = SNR_start_dB
    while SNR_dB <= SNR_end_dB do  -- SNR loop
        noise = db2value(SNR_dB)
        logln("["..i.."], SNR: " .. SNR_dB .. "dB")

        for x1=1,#frequencys do  -- frequency loop
            frequency = frequencys[x1]

            for x2=1,#dutys do -- duty loop
                duty = dutys[x2]

                for x3=1,#combines do -- combine loop
                    combine = combines[x3]

                    for x4=1,#bit_per_symbols do -- bit_per_symbol loop
                        bit_per_symbol = bit_per_symbols[x4]

                        -- first create document contain the parameters
                        local id = mongo_create_one_with_jsonstr(collection, "{}")
                        local tab = rt.get_file_by_id(collection, id)
                        -- logln("record file is [" .. collection .. ":" .. id .. "]")
                        tab.SNR_dB = SNR_dB
                        tab.NLCD = 32
                        tab.ct_fast = 0
                        tab.ct_slow = 0
                        tab.combine = combine
                        tab.cycle = 32
                        tab.duty = duty
                        tab.bit_per_symbol = bit_per_symbol
                        tab.primitive_data = primitive_data
                        tab.ecc_per_block = ecc_per_block
                        tab.pdata_per_block = pdata_per_block
                        tab.block_number = block_number
                        tab.frequency = {} tab.frequency["$numberDouble"] = ""..frequency
                        tab.bias = -256
                        tab.effect_length = 3
                        tab.refs_id = refs_ids[x1][x2]
                        tab.noise = {} tab.noise["$numberDouble"] = "" .. noise
                        tab.channel_training_type = 1  -- use naive channel training without SVD
                        rt.save_file(tab)
                        run("Tester/Emulation/EM_ECCEncode", collection, id)
                        run("Tester/Emulation/EM_MongoEmulate", collection, id)
                        -- then demodualte
                        tab = rt.get_file_by_id(collection, id)
                        if plot_data then
                            plot(tab.emulated_id)  -- for debugging
                        end
                        if enable_scatter_plot then
                            tab.scatter_data_id = tab.emulated_id
                            rt.save_file(tab)
                            run("Tester/Emulation/EM_ScatterPlot", collection, id)
                            tab = rt.get_file_by_id(collection, id)
                            plot(tab.scatter_output_id)  -- for debugging
                        end
                        tab.demod_data_id = tab.emulated_id
                        tab.demod_buffer_length = 64
                        tab.demod_nearest_count = 16
                        rt.save_file(tab)
                        run("Tester/Emulation/EM_Demodulate", collection, id)
                        run("Tester/Emulation/EM_ECCDecode", collection, id)
                        tab = rt.get_file_by_id(collection, id)
                        local BER = tonumber(tab.BER["$numberDouble"])
                        local repaired_BER = tonumber(tab.Repaired_BER["$numberDouble"])
                        logln("BER: " .. BER)
                        logln("Repaired BER: " .. repaired_BER)
                        -- to save space, the emulated data is of no use at all, so just delete them
                        run("Tester/DebugTest/DT_DeleteGridfsFile", tab.emulated_id)
                    end
                end
            end
        end

        SNR_dB = SNR_dB + SNR_step_dB
    end

    may_terminate()  -- to allow terminate in process
end
